#ifndef IA_BUILD_H_
#define IA_BUILD_H_

/*
 * ioarena: embedded storage benchmarking
 *
 * Copyright (c) ioarena authors
 * BSD License
*/

/*
 * This file is generated by CMake. The original file is called
 * ia_build.h.cmake. Please do not modify.
 */

#cmakedefine HAVE_SOPHIA 1
#cmakedefine HAVE_LEVELDB 1
#cmakedefine HAVE_ROCKSDB 1
#cmakedefine HAVE_WIREDTIGER 1
#cmakedefine HAVE_FORESTDB 1
#cmakedefine HAVE_LMDB 1
#cmakedefine HAVE_MDBX 1
#cmakedefine HAVE_NESSDB 1
#cmakedefine HAVE_SQLITE3 1
#cmakedefine HAVE_EJDB 1
#cmakedefine HAVE_VEDISDB 1

extern iadriver ia_leveldb;
extern iadriver ia_rocksdb;
extern iadriver ia_lmdb;
extern iadriver ia_mdbx;
extern iadriver ia_forestdb;
extern iadriver ia_wt;
extern iadriver ia_sophia;
extern iadriver ia_nessdb;
extern iadriver ia_sqlite3;
extern iadriver ia_ejdb;
extern iadriver ia_vedisdb;
extern iadriver ia_dummy;
extern iadriver ia_debug;

static inline iadriver*
ia_of(char *name)
{
#ifdef HAVE_SOPHIA
	if (strcasecmp(name, "sophia") == 0) {
		return &ia_sophia;
	}
#endif
#ifdef HAVE_LEVELDB
	if (strcasecmp(name, "leveldb") == 0) {
		return &ia_leveldb;
	}
#endif
#ifdef HAVE_ROCKSDB
	if (strcasecmp(name, "rocksdb") == 0) {
		return &ia_rocksdb;
	}
#endif
#ifdef HAVE_WIREDTIGER
	if (strcasecmp(name, "wiredtiger") == 0) {
		return &ia_wt;
	}
#endif
#ifdef HAVE_FORESTDB
	if (strcasecmp(name, "forestdb") == 0) {
		return &ia_forestdb;
	}
#endif
#ifdef HAVE_LMDB
	if (strcasecmp(name, "lmdb") == 0) {
		return &ia_lmdb;
	}
#endif
#ifdef HAVE_NESSDB
	if (strcasecmp(name, "nessdb") == 0) {
		return &ia_nessdb;
	}
#endif
#ifdef HAVE_MDBX
	if (strcasecmp(name, "mdbx") == 0) {
		return &ia_mdbx;
	}
#endif
#ifdef HAVE_SQLITE3
	if (strcasecmp(name, "sqlite3") == 0) {
		return &ia_sqlite3;
	}
#endif
#ifdef HAVE_EJDB
	if (strcasecmp(name, "ejdb") == 0) {
		return &ia_ejdb;
	}
#endif
#ifdef HAVE_VEDISDB
	if (strcasecmp(name, "vedisdb") == 0) {
		return &ia_vedisdb;
	}
#endif
	if (strcasecmp(name, "dummy") == 0) {
		return &ia_dummy;
	}
	if (strcasecmp(name, "debug") == 0) {
		return &ia_debug;
	}
	(void)name;
	return NULL;
}

static inline char*
ia_supported(void)
{
	static char list[512];
	int len = 0;
#ifdef HAVE_SOPHIA
	len += snprintf(list + len, sizeof(list) - len, "%ssophia",
	                (len > 0) ? ", ": "");
#endif
#ifdef HAVE_LEVELDB
	len += snprintf(list + len, sizeof(list) - len, "%sleveldb",
	                (len > 0) ? ", ": "");
#endif
#ifdef HAVE_ROCKSDB
	len += snprintf(list + len, sizeof(list) - len, "%srocksdb",
	                (len > 0) ? ", ": "");
#endif
#ifdef HAVE_WIREDTIGER
	len += snprintf(list + len, sizeof(list) - len, "%swiredtiger",
	                (len > 0) ? ", ": "");
#endif
#ifdef HAVE_FORESTDB
	len += snprintf(list + len, sizeof(list) - len, "%sforestdb",
	                (len > 0) ? ", ": "");
#endif
#ifdef HAVE_LMDB
	len += snprintf(list + len, sizeof(list) - len, "%slmdb",
	                (len > 0) ? ", ": "");
#endif
#ifdef HAVE_NESSDB
	len += snprintf(list + len, sizeof(list) - len, "%snessdb",
	                (len > 0) ? ", ": "");
#endif
#ifdef HAVE_MDBX
	len += snprintf(list + len, sizeof(list) - len, "%smdbx",
	                (len > 0) ? ", ": "");
#endif
#ifdef HAVE_SQLITE3
	len += snprintf(list + len, sizeof(list) - len, "%ssqlite3",
	                (len > 0) ? ", ": "");
#endif
#ifdef HAVE_EJDB
	len += snprintf(list + len, sizeof(list) - len, "%sejdb",
	                (len > 0) ? ", ": "");
#endif
#ifdef HAVE_VEDISDB
	len += snprintf(list + len, sizeof(list) - len, "%svedisdb",
	                (len > 0) ? ", ": "");
#endif

	len += snprintf(list + len, sizeof(list) - len, "%sdummy",
			(len > 0) ? ", ": "");
	if (len == 0) {
		snprintf(list, sizeof(list), "no_driver_supported");
	}
	return list;
}

#endif
